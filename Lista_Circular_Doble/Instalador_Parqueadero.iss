; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "P'arqueadero"
#define MyAppVersion "1.5"
#define MyAppExeName "main_Lista_Circular_Doble.exe"
#define MyAppAssocName MyAppName + ""
#define MyAppAssocExt ".myp"
#define MyAppAssocKey StringChange(MyAppAssocName, " ", "") + MyAppAssocExt

[Setup]
AppId={{B2F2C9C2-DEB8-4D51-93D5-25DB9DA3B8D1}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
DefaultDirName={autopf}\{#MyAppName}
ArchitecturesAllowed=x64compatible
ArchitecturesInstallIn64BitMode=x64compatible
ChangesAssociations=yes
DisableProgramGroupPage=yes
OutputBaseFilename=Mi Parqueadero
Compression=lzma
SolidCompression=yes
WizardStyle=modern

[Languages]
Name: "spanish"; MessagesFile: "compiler:Languages\Spanish.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "D:\Grupo_Estructuras\Lista_Circular_Doble\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Grupo_Estructuras\Lista_Circular_Doble\Lista_Circular_Doble.cpp"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Grupo_Estructuras\Lista_Circular_Doble\Lista_Circular_Doble.h"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Grupo_Estructuras\Lista_Circular_Doble\main_Lista_Circular_Doble.cpp"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Grupo_Estructuras\Lista_Circular_Doble\main_Lista_Circular_Doble.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Grupo_Estructuras\Lista_Circular_Doble\Menus.cpp"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Grupo_Estructuras\Lista_Circular_Doble\Menus.h"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Grupo_Estructuras\Lista_Circular_Doble\Nodo_Circular_Doble.cpp"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Grupo_Estructuras\Lista_Circular_Doble\Nodo_Circular_Doble.h"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Grupo_Estructuras\Lista_Circular_Doble\Parqueadero.cpp"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Grupo_Estructuras\Lista_Circular_Doble\Parqueadero.h"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Grupo_Estructuras\Lista_Circular_Doble\Validaciones.cpp"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Grupo_Estructuras\Lista_Circular_Doble\Validaciones.h"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Grupo_Estructuras\Lista_Circular_Doble\license.txt"; DestDir: "{app}"; Flags: dontcopy

[Registry]
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocExt}\OpenWithProgids"; ValueType: string; ValueName: "{#MyAppAssocKey}"; ValueData: ""; Flags: uninsdeletevalue
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}"; ValueType: string; ValueName: ""; ValueData: "{#MyAppAssocName}"; Flags: uninsdeletekey
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}\DefaultIcon"; ValueType: string; ValueName: ""; ValueData: "{app}\{#MyAppExeName},0"
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}\shell\open\command"; ValueType: string; ValueName: ""; ValueData: """{app}\{#MyAppExeName}"" ""%1"""
Root: HKA; Subkey: "Software\Classes\Applications\{#MyAppExeName}\SupportedTypes"; ValueType: string; ValueName: ".myp"; ValueData: ""

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

[Code]
const
  LicenseFile = '{app}\license.txt';

function IsKeyValid(InputKey: string): Boolean;
var
  KeyList: TStringList;
  I: Integer;
  ResolvedPath: string;
begin
  Result := False;
  KeyList := TStringList.Create;
  try
    // Resolver {app} al valor real de la ruta de instalación
    ResolvedPath := ExpandConstant(LicenseFile);

    // Verificar si el archivo existe
    if FileExists(ResolvedPath) then
    begin
      KeyList.LoadFromFile(ResolvedPath);
      for I := 0 to KeyList.Count - 1 do
      begin
        if Trim(InputKey) = Trim(KeyList[I]) then
        begin
          Result := True;
          Break;
        end;
      end;
    end
    else
      MsgBox('El archivo license.txt no se encontró en: ' + ResolvedPath, mbError, MB_OK);
  finally
    KeyList.Free;
  end;
end;




function InitializeSetup(): Boolean;
var
  UserKey: string;
begin
  Result := False; // Bloquear la instalación por defecto
  UserKey := '';   // Inicializar la variable de entrada

  // Solicitar clave de producto al usuario
  UserKey := InputBox('Clave de Producto', 'Por favor, ingrese su clave de producto:', '');

  if UserKey <> '' then
  begin
    if IsKeyValid(UserKey) then
      Result := True // Permitir instalación si la clave es válida
    else
      MsgBox('Clave inválida. La instalación no continuará.', mbError, MB_OK);
  end
  else
    MsgBox('No se ingresó ninguna clave. La instalación no continuará.', mbError, MB_OK);
end;

